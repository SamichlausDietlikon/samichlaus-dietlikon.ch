
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "pg_database_owner";

CREATE TYPE "public"."staff_roles" AS ENUM (
    'admin',
    'tour_manager',
    'staff'
);

ALTER TYPE "public"."staff_roles" OWNER TO "postgres";

CREATE TYPE "public"."tour_template_tags" AS ENUM (
    'development',
    'released',
    'deprecated'
);

ALTER TYPE "public"."tour_template_tags" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."compare_from_until"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$BEGIN
  IF NEW."from" > NEW.until THEN
    RAISE 'Das Startdatum darf nicht nach dem Enddatum beginnen';
  END IF;

  RETURN NEW;
END;$$;

ALTER FUNCTION "public"."compare_from_until"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."obey_template_tag_order"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$BEGIN
  IF OLD.tag = 'development' AND NEW.tag = 'released' OR OLD.tag = 'released' AND NEW.tag = 'deprecated' THEN
    RETURN NEW;
  ELSE
    RAISE 'Die erlaubte Reihenfolge der Tags wurde nicht eingehalten (development -> released -> deprecated)';
  END IF;
END;$$;

ALTER FUNCTION "public"."obey_template_tag_order"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."set_updated_at"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."set_updated_at"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."audits" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "morphed_id" bigint NOT NULL,
    "morphed_type" character varying NOT NULL,
    "message" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."audits" OWNER TO "postgres";

ALTER TABLE "public"."audits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."audits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."responsibilities" (
    "id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "time_overlapping" boolean DEFAULT false NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."responsibilities" OWNER TO "postgres";

ALTER TABLE "public"."responsibilities" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."responsibilities_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_calendar_entries" (
    "id" bigint NOT NULL,
    "season_id" bigint NOT NULL,
    "title" character varying NOT NULL,
    "from" timestamp without time zone,
    "until" timestamp without time zone,
    "description" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."season_calendar_entries" OWNER TO "postgres";

ALTER TABLE "public"."season_calendar_entries" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_calendar_entries_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_members" (
    "id" bigint NOT NULL,
    "season_id" bigint,
    "user_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."season_members" OWNER TO "postgres";

ALTER TABLE "public"."season_members" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_members_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_templates" (
    "id" bigint NOT NULL,
    "season_id" bigint NOT NULL,
    "tout_template_version_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."season_templates" OWNER TO "postgres";

ALTER TABLE "public"."season_templates" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_templates_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_tour_events" (
    "id" bigint NOT NULL,
    "season_tour_id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "from" timestamp with time zone NOT NULL,
    "until" timestamp with time zone NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."season_tour_events" OWNER TO "postgres";

ALTER TABLE "public"."season_tour_events" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_tour_events_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_tour_roles" (
    "id" bigint NOT NULL,
    "season_tour_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "responsibility_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."season_tour_roles" OWNER TO "postgres";

ALTER TABLE "public"."season_tour_roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_tour_roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_tour_villages" (
    "id" bigint NOT NULL,
    "season_tour_id" bigint NOT NULL,
    "village_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."season_tour_villages" OWNER TO "postgres";

ALTER TABLE "public"."season_tour_villages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_tour_villages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_tours" (
    "id" bigint NOT NULL,
    "season_id" bigint NOT NULL,
    "tour_template_version_id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "from" timestamp with time zone NOT NULL,
    "until" timestamp with time zone NOT NULL,
    "comment" "text",
    "active" boolean NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."season_tours" OWNER TO "postgres";

ALTER TABLE "public"."season_tours" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_tours_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_visit_sins" (
    "id" bigint NOT NULL,
    "season_visit_id" bigint NOT NULL,
    "first_name" character varying NOT NULL,
    "last_name" character varying NOT NULL,
    "age" smallint NOT NULL,
    "teacher" character varying,
    "class" character varying,
    "pet" character varying,
    "mother_name" character varying,
    "father_name" character varying,
    "grandmother_name" character varying,
    "grandfather_name" character varying,
    "liked_food" "json",
    "disliked_food" "json",
    "hobbies" "json",
    "positives" "json",
    "negatives" "json",
    "comment" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."season_visit_sins" OWNER TO "postgres";

ALTER TABLE "public"."season_visit_sins" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_visit_sins_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."season_visits" (
    "id" bigint NOT NULL,
    "season_tour_id" bigint,
    "from" timestamp without time zone,
    "until" timestamp without time zone NOT NULL,
    "first_name" character varying NOT NULL,
    "last_name" character varying NOT NULL,
    "organization" character varying,
    "email" character varying NOT NULL,
    "phone" character varying NOT NULL,
    "street" character varying,
    "zip" smallint,
    "city" character varying,
    "template_data" "json" NOT NULL,
    "donation" real,
    "comment" "text",
    "registration_complete" boolean DEFAULT false NOT NULL,
    "visit_confirmation_email_sent" boolean DEFAULT false NOT NULL,
    "visit_confirmed" boolean DEFAULT false NOT NULL,
    "child_informations" boolean DEFAULT false NOT NULL,
    "child_informations_notifier_sent" boolean DEFAULT false NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "store_email" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."season_visits" OWNER TO "postgres";

ALTER TABLE "public"."season_visits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."season_visits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."seasons" (
    "id" bigint NOT NULL,
    "name" character varying,
    "from" timestamp with time zone,
    "until" timestamp with time zone,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "udpated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."seasons" OWNER TO "postgres";

ALTER TABLE "public"."seasons" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."seasons_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."tour_template_versions" (
    "id" bigint NOT NULL,
    "tour_template_id" bigint,
    "version" smallint NOT NULL,
    "template" "json" NOT NULL,
    "tag" "public"."tour_template_tags" NOT NULL,
    "description" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."tour_template_versions" OWNER TO "postgres";

ALTER TABLE "public"."tour_template_versions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tour_template_versions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."tour_templates" (
    "id" bigint NOT NULL,
    "title" character varying NOT NULL,
    "description" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."tour_templates" OWNER TO "postgres";

ALTER TABLE "public"."tour_templates" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tour_templates_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "first_name" character varying NOT NULL,
    "last_name" character varying NOT NULL,
    "phone" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "udpated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "staff_role" "public"."staff_roles"
);

ALTER TABLE "public"."users" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."villages" (
    "id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."villages" OWNER TO "postgres";

ALTER TABLE "public"."villages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."villages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."audits"
    ADD CONSTRAINT "audits_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."responsibilities"
    ADD CONSTRAINT "responsibilities_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."responsibilities"
    ADD CONSTRAINT "responsibilities_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_calendar_entries"
    ADD CONSTRAINT "season_calendar_entries_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_members"
    ADD CONSTRAINT "season_members_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_templates"
    ADD CONSTRAINT "season_templates_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_tour_events"
    ADD CONSTRAINT "season_tour_events_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."season_tour_events"
    ADD CONSTRAINT "season_tour_events_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_tour_roles"
    ADD CONSTRAINT "season_tour_roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_tour_villages"
    ADD CONSTRAINT "season_tour_villages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_tours"
    ADD CONSTRAINT "season_tours_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_visit_sins"
    ADD CONSTRAINT "season_visit_sins_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."season_visits"
    ADD CONSTRAINT "season_visits_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."seasons"
    ADD CONSTRAINT "seasons_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."seasons"
    ADD CONSTRAINT "seasons_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tour_template_versions"
    ADD CONSTRAINT "tour_template_versions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tour_templates"
    ADD CONSTRAINT "tour_templates_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tour_templates"
    ADD CONSTRAINT "tour_templates_title_key" UNIQUE ("title");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."villages"
    ADD CONSTRAINT "villages_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."villages"
    ADD CONSTRAINT "villages_pkey" PRIMARY KEY ("id");

CREATE OR REPLACE TRIGGER "audits_set_updated_at" BEFORE UPDATE ON "public"."audits" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "responsibilities_set_updated_at" BEFORE UPDATE ON "public"."responsibilities" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_calendar_entries_compare_from_until" BEFORE INSERT OR UPDATE ON "public"."season_calendar_entries" FOR EACH ROW EXECUTE FUNCTION "public"."compare_from_until"();

CREATE OR REPLACE TRIGGER "season_calendar_entries_set_updated_at" BEFORE UPDATE ON "public"."season_calendar_entries" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_members_set_updated_at" BEFORE UPDATE ON "public"."season_members" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_templates_set_updated_at" BEFORE UPDATE ON "public"."season_templates" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_tour_events_compare_from_until" BEFORE INSERT OR UPDATE ON "public"."season_tour_events" FOR EACH ROW EXECUTE FUNCTION "public"."compare_from_until"();

CREATE OR REPLACE TRIGGER "season_tour_events_set_updated_at" BEFORE UPDATE ON "public"."season_tour_events" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_tour_roles_set_updated_at" BEFORE UPDATE ON "public"."season_tour_roles" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_tour_villages_set_updated_at" BEFORE UPDATE ON "public"."season_tour_villages" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_tours_compare_from_until" BEFORE INSERT OR UPDATE ON "public"."season_tours" FOR EACH ROW EXECUTE FUNCTION "public"."compare_from_until"();

CREATE OR REPLACE TRIGGER "season_tours_set_updated_at" BEFORE UPDATE ON "public"."season_tours" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_visit_sins_set_updated_at" BEFORE UPDATE ON "public"."season_visit_sins" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "season_visits_compare_from_until" BEFORE INSERT OR UPDATE ON "public"."season_visits" FOR EACH ROW EXECUTE FUNCTION "public"."compare_from_until"();

CREATE OR REPLACE TRIGGER "season_visits_set_updated_at" BEFORE UPDATE ON "public"."season_visits" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "seasons_compare_from_until" BEFORE INSERT OR UPDATE ON "public"."seasons" FOR EACH ROW EXECUTE FUNCTION "public"."compare_from_until"();

CREATE OR REPLACE TRIGGER "seasons_set_updated_at" BEFORE UPDATE ON "public"."seasons" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "tour_template_versions_obey_template_tag_order" BEFORE UPDATE ON "public"."tour_template_versions" FOR EACH ROW EXECUTE FUNCTION "public"."obey_template_tag_order"();

CREATE OR REPLACE TRIGGER "tour_template_versions_set_updated_at" BEFORE UPDATE ON "public"."tour_template_versions" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "tour_templates_set_updated_at" BEFORE UPDATE ON "public"."tour_templates" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "users_set_updated_at" BEFORE UPDATE ON "public"."users" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

CREATE OR REPLACE TRIGGER "villages_set_updated_at" BEFORE UPDATE ON "public"."villages" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();

ALTER TABLE ONLY "public"."audits"
    ADD CONSTRAINT "public_audits_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id");

ALTER TABLE ONLY "public"."season_calendar_entries"
    ADD CONSTRAINT "public_season_calendar_entries_season_id_fkey" FOREIGN KEY ("season_id") REFERENCES "public"."seasons"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_members"
    ADD CONSTRAINT "public_season_members_season_id_fkey" FOREIGN KEY ("season_id") REFERENCES "public"."seasons"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_members"
    ADD CONSTRAINT "public_season_members_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_templates"
    ADD CONSTRAINT "public_season_templates_season_id_fkey" FOREIGN KEY ("season_id") REFERENCES "public"."seasons"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_tour_events"
    ADD CONSTRAINT "public_season_tour_events_season_tour_id_fkey" FOREIGN KEY ("season_tour_id") REFERENCES "public"."season_tours"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_tour_roles"
    ADD CONSTRAINT "public_season_tour_roles_responsibility_id_fkey" FOREIGN KEY ("responsibility_id") REFERENCES "public"."responsibilities"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_tour_roles"
    ADD CONSTRAINT "public_season_tour_roles_season_tour_id_fkey" FOREIGN KEY ("season_tour_id") REFERENCES "public"."season_tours"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_tour_roles"
    ADD CONSTRAINT "public_season_tour_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_tour_villages"
    ADD CONSTRAINT "public_season_tour_villages_season_tour_id_fkey" FOREIGN KEY ("season_tour_id") REFERENCES "public"."season_tours"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_tour_villages"
    ADD CONSTRAINT "public_season_tour_villages_village_id_fkey" FOREIGN KEY ("village_id") REFERENCES "public"."villages"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_tours"
    ADD CONSTRAINT "public_season_tours_season_id_fkey" FOREIGN KEY ("season_id") REFERENCES "public"."seasons"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_tours"
    ADD CONSTRAINT "public_season_tours_tour_template_version_id_fkey" FOREIGN KEY ("tour_template_version_id") REFERENCES "public"."tour_template_versions"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_visit_sins"
    ADD CONSTRAINT "public_season_visit_sins_season_visit_id_fkey" FOREIGN KEY ("season_visit_id") REFERENCES "public"."season_visits"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."season_visits"
    ADD CONSTRAINT "public_season_visits_season_tour_id_fkey" FOREIGN KEY ("season_tour_id") REFERENCES "public"."season_tours"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."tour_template_versions"
    ADD CONSTRAINT "public_tour_template_versions_tour_template_id_fkey" FOREIGN KEY ("tour_template_id") REFERENCES "public"."tour_templates"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "public_users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Everyone can select" ON "public"."season_calendar_entries" FOR SELECT USING (true);

CREATE POLICY "Everyone can select" ON "public"."seasons" FOR SELECT USING (true);

CREATE POLICY "Only admins & tm & user himself can select" ON "public"."season_visit_sins" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles") OR ("users"."id" = "auth"."uid"())))));

CREATE POLICY "Only admins & tm & user himself can select" ON "public"."season_visits" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles") OR ("users"."id" = "auth"."uid"())))));

CREATE POLICY "Only admins & tm & user himself can update" ON "public"."season_visit_sins" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles") OR ("users"."id" = "auth"."uid"()))))) WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles") OR ("users"."id" = "auth"."uid"())))));

CREATE POLICY "Only admins & tm & user himself can update" ON "public"."season_visits" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles") OR ("users"."id" = "auth"."uid"()))))) WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles") OR ("users"."id" = "auth"."uid"())))));

CREATE POLICY "Only admins & tm can delete" ON "public"."season_visits" FOR DELETE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles")))));

CREATE POLICY "Only admins and tm can delete" ON "public"."season_tour_roles" FOR DELETE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles")))));

CREATE POLICY "Only admins and tm can insert" ON "public"."season_tour_roles" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles")))));

CREATE POLICY "Only admins and tm can update" ON "public"."season_tour_roles" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles"))))) WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE (("users"."staff_role" = 'admin'::"public"."staff_roles") OR ("users"."staff_role" = 'tour_manager'::"public"."staff_roles")))));

CREATE POLICY "Only admins can delete" ON "public"."season_members" FOR DELETE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can delete & no version is released or deprecated" ON "public"."tour_templates" FOR DELETE USING ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "tour_template_versions"."id"
   FROM "public"."tour_template_versions"
  WHERE (("tour_template_versions"."tour_template_id" = "tour_templates"."id") AND ("tour_template_versions"."tag" = ANY (ARRAY['released'::"public"."tour_template_tags", 'deprecated'::"public"."tour_template_tags"]))))))));

CREATE POLICY "Only admins can delete & nothing booked on season" ON "public"."seasons" FOR DELETE USING ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_members"."id"
   FROM "public"."season_members"
  WHERE ("seasons"."id" = "season_members"."season_id")))) AND (NOT (EXISTS ( SELECT "season_calendar_entries"."id"
   FROM "public"."season_calendar_entries"
  WHERE ("seasons"."id" = "season_calendar_entries"."season_id")))) AND (NOT (EXISTS ( SELECT "season_tours"."id"
   FROM "public"."season_tours"
  WHERE ("seasons"."id" = "season_tours"."season_id")))) AND (NOT (EXISTS ( SELECT "season_templates"."id"
   FROM "public"."season_templates"
  WHERE ("seasons"."id" = "season_templates"."season_id"))))));

CREATE POLICY "Only admins can delete & template unused & season not started" ON "public"."season_templates" FOR DELETE USING ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_tours"."id"
   FROM "public"."season_tours"
  WHERE ("season_tours"."season_id" = "season_templates"."season_id")))) AND (NOT (EXISTS ( SELECT "seasons"."id"
   FROM "public"."seasons"
  WHERE (("seasons"."id" = "season_templates"."season_id") AND ("seasons"."from" > "now"())))))));

CREATE POLICY "Only admins can delete & tour not active || nothing booked" ON "public"."season_tour_villages" FOR DELETE USING (((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_tours"."id"
   FROM "public"."season_tours"
  WHERE (("season_tours"."id" = "season_tour_villages"."season_tour_id") AND ("season_tours"."active" IS TRUE)))))) OR (NOT (EXISTS ( SELECT "season_visits"."id"
   FROM "public"."season_visits"
  WHERE ("season_visits"."season_tour_id" = "season_tour_villages"."season_tour_id"))))));

CREATE POLICY "Only admins can delete & tour not active || nothing booked" ON "public"."season_tours" FOR DELETE USING (((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND ("active" IS FALSE)) OR (NOT (EXISTS ( SELECT "season_visits"."id"
   FROM "public"."season_visits"
  WHERE ("season_visits"."season_tour_id" = "season_tours"."id"))))));

CREATE POLICY "Only admins can delete and if responsibility isn't in tour role" ON "public"."responsibilities" FOR DELETE USING ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_tour_roles"."id"
   FROM "public"."season_tour_roles"
  WHERE ("responsibilities"."id" = "season_tour_roles"."responsibility_id"))))));

CREATE POLICY "Only admins can delete and if village isn't used in any tour" ON "public"."villages" FOR DELETE USING ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_tour_villages"."id"
   FROM "public"."season_tour_villages"
  WHERE ("villages"."id" = "season_tour_villages"."village_id"))))));

CREATE POLICY "Only admins can insert" ON "public"."responsibilities" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can insert" ON "public"."season_members" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can insert" ON "public"."season_tour_villages" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can insert" ON "public"."season_tours" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can insert" ON "public"."seasons" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can insert" ON "public"."tour_template_versions" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can insert" ON "public"."tour_templates" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can insert" ON "public"."villages" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can insert & seasons not started" ON "public"."season_templates" FOR INSERT WITH CHECK ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "seasons"."id"
   FROM "public"."seasons"
  WHERE (("seasons"."id" = "season_templates"."season_id") AND ("seasons"."from" > "now"())))))));

CREATE POLICY "Only admins can select all" ON "public"."users" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users_1"."id"
   FROM "public"."users" "users_1"
  WHERE ("users_1"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can update" ON "public"."responsibilities" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles")))) WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can update" ON "public"."seasons" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles")))) WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can update" ON "public"."tour_templates" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles")))) WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can update" ON "public"."villages" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles")))) WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))));

CREATE POLICY "Only admins can update & only when in dev or released" ON "public"."tour_template_versions" FOR UPDATE USING (((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND ("tag" = 'development'::"public"."tour_template_tags")) OR ("tag" = 'released'::"public"."tour_template_tags"))) WITH CHECK (((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND ("tag" = 'development'::"public"."tour_template_tags")) OR ("tag" = 'released'::"public"."tour_template_tags")));

CREATE POLICY "Only admins can update & template unused & season not started" ON "public"."season_templates" FOR UPDATE USING ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_tours"."id"
   FROM "public"."season_tours"
  WHERE ("season_tours"."season_id" = "season_templates"."season_id")))) AND (NOT (EXISTS ( SELECT "seasons"."id"
   FROM "public"."seasons"
  WHERE (("seasons"."id" = "season_templates"."season_id") AND ("seasons"."from" > "now"()))))))) WITH CHECK ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_tours"."id"
   FROM "public"."season_tours"
  WHERE ("season_tours"."season_id" = "season_templates"."season_id")))) AND (NOT (EXISTS ( SELECT "seasons"."id"
   FROM "public"."seasons"
  WHERE (("seasons"."id" = "season_templates"."season_id") AND ("seasons"."from" > "now"())))))));

CREATE POLICY "Only admins can update & tour not active || nothing booked" ON "public"."season_tour_villages" FOR UPDATE USING (((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_tours"."id"
   FROM "public"."season_tours"
  WHERE (("season_tours"."id" = "season_tour_villages"."season_tour_id") AND ("season_tours"."active" IS TRUE)))))) OR (NOT (EXISTS ( SELECT "season_visits"."id"
   FROM "public"."season_visits"
  WHERE ("season_visits"."season_tour_id" = "season_tour_villages"."season_tour_id")))))) WITH CHECK (((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND (NOT (EXISTS ( SELECT "season_tours"."id"
   FROM "public"."season_tours"
  WHERE (("season_tours"."id" = "season_tour_villages"."season_tour_id") AND ("season_tours"."active" IS TRUE)))))) OR (NOT (EXISTS ( SELECT "season_visits"."id"
   FROM "public"."season_visits"
  WHERE ("season_visits"."season_tour_id" = "season_tour_villages"."season_tour_id"))))));

CREATE POLICY "Only admins can update & tour not active || nothing booked" ON "public"."season_tours" FOR UPDATE USING (((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND ("active" IS FALSE)) OR (NOT (EXISTS ( SELECT "season_visits"."id"
   FROM "public"."season_visits"
  WHERE ("season_visits"."season_tour_id" = "season_tours"."id")))))) WITH CHECK (((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" = 'admin'::"public"."staff_roles"))) AND ("active" IS FALSE)) OR (NOT (EXISTS ( SELECT "season_visits"."id"
   FROM "public"."season_visits"
  WHERE ("season_visits"."season_tour_id" = "season_tours"."id"))))));

CREATE POLICY "Only admins can update & user his own data" ON "public"."users" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "users_1"."id"
   FROM "public"."users" "users_1"
  WHERE (("users_1"."staff_role" = 'admin'::"public"."staff_roles") OR ("users_1"."id" = "auth"."uid"()))))) WITH CHECK (("auth"."uid"() IN ( SELECT "users_1"."id"
   FROM "public"."users" "users_1"
  WHERE (("users_1"."staff_role" = 'admin'::"public"."staff_roles") OR ("users_1"."id" = "auth"."uid"())))));

CREATE POLICY "Only creator of visit can insert" ON "public"."season_visit_sins" FOR INSERT WITH CHECK (((( SELECT "season_visits"."email"
   FROM "public"."season_visits"
  WHERE ("season_visits"."id" = "season_visit_sins"."season_visit_id")))::"text" = (( SELECT "users"."email"
   FROM "auth"."users"
  WHERE ("users"."id" = "auth"."uid"())))::"text"));

CREATE POLICY "Only staff can delete & if event hasn't expired" ON "public"."season_calendar_entries" FOR DELETE USING ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))) AND ("from" > "now"())));

CREATE POLICY "Only staff can insert" ON "public"."audits" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can insert" ON "public"."season_calendar_entries" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."audits" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."responsibilities" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."season_members" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."season_templates" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."season_tour_events" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."season_tour_roles" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."season_tour_villages" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."season_tours" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."tour_template_versions" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."tour_templates" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select" ON "public"."villages" FOR SELECT USING (("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))));

CREATE POLICY "Only staff can select all staff" ON "public"."users" FOR SELECT USING ((("auth"."uid"() IN ( SELECT "users_1"."id"
   FROM "public"."users" "users_1"
  WHERE ("users_1"."staff_role" IS NOT NULL))) AND ("staff_role" IS NOT NULL)));

CREATE POLICY "Only staff can update & if event hasn't expired" ON "public"."season_calendar_entries" FOR UPDATE USING ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))) AND ("from" > "now"()))) WITH CHECK ((("auth"."uid"() IN ( SELECT "users"."id"
   FROM "public"."users"
  WHERE ("users"."staff_role" IS NOT NULL))) AND ("from" > "now"())));

CREATE POLICY "Only user can delete himself" ON "public"."users" FOR DELETE USING (("id" = "auth"."uid"()));

CREATE POLICY "Only user can insert if he doesn't already exist" ON "public"."users" FOR INSERT WITH CHECK ((NOT (EXISTS ( SELECT "users_1"."id"
   FROM "public"."users" "users_1"
  WHERE ("users_1"."id" = "auth"."uid"())))));

CREATE POLICY "Only user can select himself" ON "public"."users" FOR SELECT USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."audits" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."responsibilities" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_calendar_entries" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_members" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_templates" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_tour_events" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_tour_roles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_tour_villages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_tours" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_visit_sins" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."season_visits" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."seasons" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tour_template_versions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tour_templates" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."villages" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."compare_from_until"() TO "anon";
GRANT ALL ON FUNCTION "public"."compare_from_until"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."compare_from_until"() TO "service_role";

GRANT ALL ON FUNCTION "public"."obey_template_tag_order"() TO "anon";
GRANT ALL ON FUNCTION "public"."obey_template_tag_order"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."obey_template_tag_order"() TO "service_role";

GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "anon";
GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "service_role";

GRANT ALL ON TABLE "public"."audits" TO "anon";
GRANT ALL ON TABLE "public"."audits" TO "authenticated";
GRANT ALL ON TABLE "public"."audits" TO "service_role";

GRANT ALL ON SEQUENCE "public"."audits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."audits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."audits_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."responsibilities" TO "anon";
GRANT ALL ON TABLE "public"."responsibilities" TO "authenticated";
GRANT ALL ON TABLE "public"."responsibilities" TO "service_role";

GRANT ALL ON SEQUENCE "public"."responsibilities_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."responsibilities_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."responsibilities_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_calendar_entries" TO "anon";
GRANT ALL ON TABLE "public"."season_calendar_entries" TO "authenticated";
GRANT ALL ON TABLE "public"."season_calendar_entries" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_calendar_entries_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_calendar_entries_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_calendar_entries_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_members" TO "anon";
GRANT ALL ON TABLE "public"."season_members" TO "authenticated";
GRANT ALL ON TABLE "public"."season_members" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_members_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_members_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_members_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_templates" TO "anon";
GRANT ALL ON TABLE "public"."season_templates" TO "authenticated";
GRANT ALL ON TABLE "public"."season_templates" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_templates_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_templates_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_templates_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_tour_events" TO "anon";
GRANT ALL ON TABLE "public"."season_tour_events" TO "authenticated";
GRANT ALL ON TABLE "public"."season_tour_events" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_tour_events_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_tour_events_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_tour_events_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_tour_roles" TO "anon";
GRANT ALL ON TABLE "public"."season_tour_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."season_tour_roles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_tour_roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_tour_roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_tour_roles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_tour_villages" TO "anon";
GRANT ALL ON TABLE "public"."season_tour_villages" TO "authenticated";
GRANT ALL ON TABLE "public"."season_tour_villages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_tour_villages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_tour_villages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_tour_villages_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_tours" TO "anon";
GRANT ALL ON TABLE "public"."season_tours" TO "authenticated";
GRANT ALL ON TABLE "public"."season_tours" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_tours_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_tours_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_tours_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_visit_sins" TO "anon";
GRANT ALL ON TABLE "public"."season_visit_sins" TO "authenticated";
GRANT ALL ON TABLE "public"."season_visit_sins" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_visit_sins_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_visit_sins_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_visit_sins_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."season_visits" TO "anon";
GRANT ALL ON TABLE "public"."season_visits" TO "authenticated";
GRANT ALL ON TABLE "public"."season_visits" TO "service_role";

GRANT ALL ON SEQUENCE "public"."season_visits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."season_visits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."season_visits_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."seasons" TO "anon";
GRANT ALL ON TABLE "public"."seasons" TO "authenticated";
GRANT ALL ON TABLE "public"."seasons" TO "service_role";

GRANT ALL ON SEQUENCE "public"."seasons_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."seasons_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."seasons_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."tour_template_versions" TO "anon";
GRANT ALL ON TABLE "public"."tour_template_versions" TO "authenticated";
GRANT ALL ON TABLE "public"."tour_template_versions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tour_template_versions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tour_template_versions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tour_template_versions_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."tour_templates" TO "anon";
GRANT ALL ON TABLE "public"."tour_templates" TO "authenticated";
GRANT ALL ON TABLE "public"."tour_templates" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tour_templates_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tour_templates_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tour_templates_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

GRANT ALL ON TABLE "public"."villages" TO "anon";
GRANT ALL ON TABLE "public"."villages" TO "authenticated";
GRANT ALL ON TABLE "public"."villages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."villages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."villages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."villages_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
